import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from dotenv import load_dotenv
import sqlite3

class SimpleEmailSystem:
    """Simplified email system for factor alerts"""
    
    def __init__(self, db_path="factor_monitoring.db"):
        load_dotenv()
        self.db_path = db_path
        
        # Email configuration from environment
        self.sender_email = os.getenv('FACTOR_EMAIL')
        self.sender_password = os.getenv('FACTOR_EMAIL_PASSWORD')
        self.recipients = os.getenv('FACTOR_RECIPIENTS', '').split(',')
        
        # Clean up recipient list
        self.recipients = [email.strip() for email in self.recipients if email.strip()]
        
        print(f"üìß Email system initialized")
        print(f"   From: {self.sender_email}")
        print(f"   To: {len(self.recipients)} recipients")
    
    def create_factor_report(self, data, alerts):
        """Create HTML email report"""
        
        html_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background: #2c3e50; color: white; padding: 15px; text-align: center; }}
                .factor-table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
                .factor-table th, .factor-table td {{ 
                    border: 1px solid #ddd; 
                    padding: 12px; 
                    text-align: left; 
                }}
                .factor-table th {{ background-color: #3498db; color: white; }}
                .positive {{ color: #27ae60; font-weight: bold; }}
                .negative {{ color: #e74c3c; font-weight: bold; }}
                .alert-high {{ background: #ffebee; padding: 10px; margin: 5px 0; border-left: 4px solid #e74c3c; }}
                .alert-medium {{ background: #fff3e0; padding: 10px; margin: 5px 0; border-left: 4px solid #f39c12; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìä Factor Monitoring Report</h1>
                <p>{datetime.now().strftime('%Y-%m-%d %H:%M:%S EST')}</p>
            </div>
            
            <h2>üíπ Factor Performance</h2>
            <table class="factor-table">
                <tr>
                    <th>Factor</th>
                    <th>Symbol</th>
                    <th>Price</th>
                    <th>Daily Return</th>
                </tr>
        """
        
        # Add factor data
        for factor_name, info in data.items():
            return_class = 'positive' if info['daily_return'] > 0 else 'negative'
            html_content += f"""
                <tr>
                    <td><strong>{factor_name}</strong></td>
                    <td>{info['symbol']}</td>
                    <td>${info['price']:.2f}</td>
                    <td class="{return_class}">{info['daily_return']:+.2%}</td>
                </tr>
            """
        
        html_content += "</table>"
        
        # Add alerts section
        if alerts:
            html_content += "<h2>üö® Active Alerts</h2>"
            
            for alert in alerts:
                alert_class = f"alert-{alert['severity'].lower()}"
                html_content += f"""
                    <div class="{alert_class}">
                        <strong>{alert['severity']}:</strong> {alert['message']}
                    </div>
                """
        else:
            html_content += "<h2>‚úÖ No Alerts</h2><p>All factors within normal ranges.</p>"
        
        html_content += """
            <hr>
            <p><em>This report was automatically generated by the Factor Monitoring System.</em></p>
        </body>
        </html>
        """
        
        return html_content
    
    def send_report(self, data, alerts):
        """Send email report"""
        
        if not self.sender_email or not self.sender_password:
            print("‚ùå Email credentials not configured")
            return False
        
        if not self.recipients:
            print("‚ùå No email recipients configured")
            return False
        
        try:
            print("üìß Preparing email report...")
            
            # Create message
            msg = MIMEMultipart('alternative')
            msg['From'] = self.sender_email
            msg['To'] = ', '.join(self.recipients)
            
            # Subject with alert count
            alert_count = len(alerts)
            subject = f"Factor Report - {datetime.now().strftime('%Y-%m-%d')}"
            if alert_count > 0:
                subject += f" ({alert_count} alerts)"
            
            msg['Subject'] = subject
            
            # Create HTML content
            html_content = self.create_factor_report(data, alerts)
            html_part = MIMEText(html_content, 'html')
            msg.attach(html_part)
            
            # Send email
            print("üì§ Sending email...")
            
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(self.sender_email, self.sender_password)
            
            for recipient in self.recipients:
                server.sendmail(self.sender_email, recipient, msg.as_string())
                print(f"   ‚úÖ Sent to {recipient}")
            
            server.quit()
            
            print("‚úÖ Email report sent successfully!")
            return True
            
        except Exception as e:
            print(f"‚ùå Email sending failed: {e}")
            return False
    
    def send_test_email(self):
        """Send test email"""
        test_data = {
            'Test Factor': {
                'symbol': 'TEST',
                'price': 100.00,
                'daily_return': 0.025,
                'date': datetime.now().strftime('%Y-%m-%d')
            }
        }
        
        test_alerts = [{
            'factor': 'Test Factor',
            'message': 'This is a test alert',
            'severity': 'MEDIUM',
            'timestamp': datetime.now().isoformat()
        }]
        
        return self.send_report(test_data, test_alerts)

# Test function
def test_email_system():
    """Test the email system"""
    email_system = SimpleEmailSystem()
    return email_system.send_test_email()

if __name__ == "__main__":
    if test_email_system():
        print("‚úÖ EMAIL SYSTEM TEST PASSED!")
    else:
        print("‚ùå EMAIL SYSTEM TEST FAILED!")
